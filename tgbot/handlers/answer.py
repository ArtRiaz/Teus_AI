import logging
import random
import asyncio
from typing import Optional
from datetime import datetime, timedelta
from aiogram import Router, types, Bot, F
from aiogram.filters import CommandStart, CommandObject, StateFilter, Command
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, \
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto, InputMediaVideo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from tgbot.keyboards.inline import answer_list_ikb, back_list, start_keyboard_user_db
from sqlalchemy import select, update
import redis.asyncio as redis
import json
import os


photo_menu = FSInputFile("tgbot/Support.png")
video_one = FSInputFile("tgbot/two.mp4")
video_two = FSInputFile("tgbot/first.mp4")
video_three = FSInputFile("tgbot/three.mp4")
video_four = FSInputFile("tgbot/four.mp4")


answer_router = Router()


@answer_router.callback_query(F.data == "menu")
async def answer_list(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    await callback.message.answer_photo(
        photo_menu,
        caption="Telegram-Bot –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ TEUS –¥–æ–ø–æ–º–∞–≥–∞—î –≤–æ–¥—ñ—è–º —à–≤–∏–¥–∫–æ –≤–∏—Ä—ñ—à–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ä–æ–±–æ—á–∏–º–∏ –ø–∏—Ç–∞–Ω–Ω—è–º–∏: –≤—ñ–¥ "
                "–∑–±–æ—ó–≤ —É –ø—Ä–æ–≥—Ä–∞–º—ñ –¥–æ —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è—Ö. –ë–æ—Ç –º–∞—î –≥–æ—Ç–æ–≤—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —á–∞—Å—Ç—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ "
                "–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –º–∏—Ç—Ç—î–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç—É–≤–∞—Ç–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é - –≤—Å–µ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –±–µ–∑ –¥–∑–≤—ñ–Ω–∫—ñ–≤.",
        reply_markup=answer_list_ikb()
    )


@answer_router.callback_query(F.data == "first")
async def answer_first(callback: CallbackQuery):
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_media(
        media=InputMediaVideo(
            media=video_one,
            caption="<b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–µ–æ üëÜ\n\n</b>"
                    "<b>- –î–µ –ë—Ä–∞—Ç–∏ –î–æ–∫—É–º–µ–Ω—Ç–∏\n\n</b>"
                    "–î–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –Ω–∞ –≤–∞–≥–æ–≤—ñ–π.–ê–¥—Ä–µ—Å—É –º–æ–∂–Ω–æ "
                    "–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ Teus Driver –∞–±–æ –ø—Ä–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏.\n\n"
                    "–∫–Ω–æ–ø–∫–∞ '–≤—ñ–¥–∫—Ä–∏—Ç–∏ –Ω–∞ –º–∞–ø—ñ'(–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Å–æ–≤–æ–π)"
        ),
        reply_markup=back_list()
    )


@answer_router.callback_query(F.data == "second")
async def answer_second(callback: CallbackQuery):
    await callback.message.edit_media(
        media=InputMediaVideo(
            media=video_two,
            caption="<b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–µ–æ üëÜ</b>\n\n"
                    "<b>- –î–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è\n\n</b>"
                    "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ –º—ñ—Å—Ü—è —Ä–æ–∑–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –º–∞—Ä—à"
                    "—Ä—É—Ç—É —Ä—É—Ö—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —É –µ–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞/–ø–æ—Ä—Ç–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\n\n,–∞–±–æ —É —Ä–æ–∑–¥—ñ–ª—ñ –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó –∑–∞—è–≤–∫–∏ Teus "
                    "Drive "
        ),
        reply_markup=back_list()
    )


@answer_router.callback_query(F.data == "third")
async def answer_third(callback: CallbackQuery):
    await callback.message.edit_media(
        media=InputMediaVideo(
            media=video_three,
            caption="<b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–µ–æ üëÜ</b>\n\n"
                    "<b>- –ö—É–¥–∏ –º–µ–Ω—ñ —ó—Ö–∞—Ç–∏\n\n</b>"
                    "–†—É—Ö –¥–æ –ø–æ—Ä—Ç—É –¥–æ–∑–≤–æ–ª–µ–Ω–æ –ª–∏—à–µ –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–ø—É—Å—Ç–∫–∏ —Ç–∞ —Ç–æ–≤–∞—Ä–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.–ü–µ—Ä–µ–¥ "
                    "–ø–æ—á–∞—Ç–∫–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫–∞–Ω-–∫–æ–ø—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –î–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è "
                    "–∞–≤—Ç–æ–º–æ–±—ñ–ª—è —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –æ—Ä–¥–µ—Ä –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –Ω–∞ –≤–∞–≥–æ–≤—ñ–π.–ü–µ—Ä–µ–¥ –≤–∏—ó–∑–¥–æ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —É—Ç–æ—á–Ω–∏—Ç–∏ —É "
                    "–∑–∞–º–æ–≤–Ω–∏–∫–∞ –∞–¥—Ä–µ—Å—É —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –ö–ü–ü –¥–ª—è –≤‚Äô—ó–∑–¥—É –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é –ø–æ—Ä—Ç—É/—Ç–µ—Ä–º—ñ–Ω–∞–ª—É\n\n"
                    "–∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å QR-–∫–æ–¥—É —á–∏ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É —É —Ä–æ–∑–¥—ñ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—é –¥–æ–¥–∞—Ç–∫—É Teus Driver."
        ),
        reply_markup=back_list()
    )


@answer_router.callback_query(F.data == "four")
async def answer_four(callback: CallbackQuery):
    await callback.message.edit_media(
        media=InputMediaVideo(
            media=video_four,
            caption="<b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –≤—ñ–¥–µ–æ üëÜ\n\n</b>"
                    "<b>–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É</b>\n\n"
                    "–†—É—Ö –¥–æ –ø–æ—Ä—Ç—É –ø–æ—á–∏–Ω–∞—Ç–∏ –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–ø—É—Å—Ç–∫–∏ —Ç–∞ —Ç–æ–≤–∞—Ä–æ-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤. –ü–µ—Ä–µ–¥ "
                    "–ø–æ—á–∞—Ç–∫–æ–º —Ä—É—Ö—É —É—Ç–æ—á–Ω–∏—Ç–∏ —É –∑–∞–º–æ–≤–Ω–∏–∫–∞ –∞–¥—Ä–µ—Å—É —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –ö–ü–ü –¥–ª—è –≤‚Äô—ó–∑–¥—É –Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—é "
                    "–ø–æ—Ä—Ç—É/—Ç–µ—Ä–º—ñ–Ω–∞–ª—É,\n\n –∞–±–æ QR code —á–∏ Barcode —É —Ä–æ–∑–¥—ñ–ª—ñ –ø—Ä–æ—Ñ—ñ–ª—è Teus Driver "
        ),
        reply_markup=back_list()
    )


@answer_router.callback_query(F.data == "five")
async def answer_five(callback: CallbackQuery):
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=photo_menu,
            caption="–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∞–±–æ –æ–±–∏—Ä—Ç—å –∫–Ω–æ–ø–∫—É –¥–∑–≤—ñ–Ω–∫–∞ —É —Ä–æ–∑–¥—ñ–ª—ñ –¥–æ–ø–æ–º–æ–≥–∏"
        ),
        reply_markup=back_list()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å" - –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
@answer_router.callback_query(F.data == "close")
async def close_message(callback: CallbackQuery):
    await callback.message.delete()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
# @answer_router.callback_query(F.data == "back")
# async def back_to_menu(callback: CallbackQuery):
#     # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     await callback.message.delete()
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
#     await callback.message.answer_photo(
#         photo,
#         caption="Description",
#         reply_markup=answer_list_ikb()
#     )



